commit c5bc9e3bdab3e95e4ebe7e8079d7f27a76936e49
Author: LIMSUNG GUK <limasdf@gmail.com>
Date:   Thu Oct 13 20:43:41 2016 +0900

    Move extension thing to /extension

diff --git a/background.js b/background.js
deleted file mode 100644
index 9f469a4..0000000
--- a/background.js
+++ /dev/null
@@ -1,104 +0,0 @@
-function fetchChanges(update_id) {
-    console.debug("fetching changes...")
-    chrome.browserAction.setBadgeBackgroundColor({ color: "#F00" });
-    var query = localStorage["query"]
-        || (["is:open", "reviewer:self", "-owner:self"].join('+') + "&o=LABELS");
-    console.debug("query = " + query);
-    queryChangeList(query).then(
-       function(result) {
-            console.debug("got changes:", result.length);
-            chrome.storage.local.set({ 'changes': result });
-
-            // update timestamp/read state
-            var updated = result.filter(function(o){ return o._number === update_id }).pop().updated;
-            chrome.storage.local.get("timestamps", function(items) {
-                var timestamps = items.timestamps || {};
-                timestamps[update_id] = updated;
-                chrome.storage.local.set({ 'timestamps': timestamps });
-            });
-        }, function(e) {
-            console.warn("failed to fetch changes:", e.message);
-            delete chrome.storage.local.changes;
-        });
-}
-
-function updateIcon(changes) {
-    try {
-        var unread = changes.filter(function(value, index, array) {return !value.reviewed});
-    } catch (e) {
-    }
-    chrome.browserAction.setBadgeText({ text: unread && unread.length.toString() || "..." });
-}
-
-function onAlarm(alarm) {
-    console.debug('background.onAlarm...');
-    fetchChanges();
-}
-
-function favicon(url) {
-    var split = url.split('://');
-    var host = split.pop();
-    if (!host) throw new Error;
-    var scheme = split.pop();
-    return (scheme ? scheme + '://' : "") + host.split('/').shift() + "/favicon.ico";
-}
-
-function onStartup() {
-    console.debug('background.onStartup...');
-
-    try {
-        chrome.browserAction.setIcon({path: favicon(localStorage["api_endpoint"])});
-    } catch (e) {
-    }
-
-    chrome.storage.local.get("changes", function(items) {
-        updateIcon(items.changes);
-    });
-    fetchChanges();
-    chrome.alarms.create('refresh', {periodInMinutes: 15});
-    chrome.browserAction.setBadgeBackgroundColor({color: "#000"});
-}
-
-function onNavigate(details) {
-    console.debug("onNavigate", details.url);
-    try {
-        var update_id = parseInt(details.url.match(/#\/c\/(\d+)/)[1]);
-        fetchChanges(update_id);
-    } catch (e) {
-        console.warn("Failed to parse id for", details.url);
-    }
-}
-
-chrome.alarms.onAlarm.addListener(onAlarm);
-chrome.runtime.onStartup.addListener(onStartup);
-chrome.runtime.onInstalled.addListener(onStartup);
-chrome.runtime.onSuspend.addListener(function() {
-    chrome.browserAction.setBadgeBackgroundColor({color: "#888"});
-});
-chrome.runtime.onSuspendCanceled.addListener(function() {
-    chrome.browserAction.setBadgeBackgroundColor({color: "#F0F"});
-});
-chrome.storage.onChanged.addListener(function(changes, namespace) {
-    for (key in changes) {
-        var storageChange = changes[key];
-        console.debug('Storage key "%s" in namespace "%s" changed. ' +
-            'Old value was "%s", new value is "%s".',
-            key,
-            namespace,
-            storageChange.oldValue,
-            storageChange.newValue);
-        if (key === "changes") {
-            updateIcon(storageChange.newValue);
-        }
-    }
-});
-chrome.webNavigation.onReferenceFragmentUpdated.addListener(onNavigate, {
-    url: [
-        { hostSuffix: localStorage["api_endpoint"].split("://").pop() }
-    ]
-});
-chrome.webNavigation.onCommitted.addListener(onNavigate, {
-    url: [
-        { hostSuffix: localStorage["api_endpoint"].split("://").pop() }
-    ]
-});
diff --git a/extension/LICENSE b/extension/LICENSE
new file mode 100644
index 0000000..09c7da9
--- /dev/null
+++ b/extension/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2014 Sergejs Kovrovs
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/extension/README.md b/extension/README.md
new file mode 100644
index 0000000..c81e412
--- /dev/null
+++ b/extension/README.md
@@ -0,0 +1,4 @@
+gerrit-chrome-extension
+=======================
+
+Chrome extension providing a notifier and quick access for incoming Gerrit code reviews.
diff --git a/extension/background.js b/extension/background.js
new file mode 100644
index 0000000..9f469a4
--- /dev/null
+++ b/extension/background.js
@@ -0,0 +1,104 @@
+function fetchChanges(update_id) {
+    console.debug("fetching changes...")
+    chrome.browserAction.setBadgeBackgroundColor({ color: "#F00" });
+    var query = localStorage["query"]
+        || (["is:open", "reviewer:self", "-owner:self"].join('+') + "&o=LABELS");
+    console.debug("query = " + query);
+    queryChangeList(query).then(
+       function(result) {
+            console.debug("got changes:", result.length);
+            chrome.storage.local.set({ 'changes': result });
+
+            // update timestamp/read state
+            var updated = result.filter(function(o){ return o._number === update_id }).pop().updated;
+            chrome.storage.local.get("timestamps", function(items) {
+                var timestamps = items.timestamps || {};
+                timestamps[update_id] = updated;
+                chrome.storage.local.set({ 'timestamps': timestamps });
+            });
+        }, function(e) {
+            console.warn("failed to fetch changes:", e.message);
+            delete chrome.storage.local.changes;
+        });
+}
+
+function updateIcon(changes) {
+    try {
+        var unread = changes.filter(function(value, index, array) {return !value.reviewed});
+    } catch (e) {
+    }
+    chrome.browserAction.setBadgeText({ text: unread && unread.length.toString() || "..." });
+}
+
+function onAlarm(alarm) {
+    console.debug('background.onAlarm...');
+    fetchChanges();
+}
+
+function favicon(url) {
+    var split = url.split('://');
+    var host = split.pop();
+    if (!host) throw new Error;
+    var scheme = split.pop();
+    return (scheme ? scheme + '://' : "") + host.split('/').shift() + "/favicon.ico";
+}
+
+function onStartup() {
+    console.debug('background.onStartup...');
+
+    try {
+        chrome.browserAction.setIcon({path: favicon(localStorage["api_endpoint"])});
+    } catch (e) {
+    }
+
+    chrome.storage.local.get("changes", function(items) {
+        updateIcon(items.changes);
+    });
+    fetchChanges();
+    chrome.alarms.create('refresh', {periodInMinutes: 15});
+    chrome.browserAction.setBadgeBackgroundColor({color: "#000"});
+}
+
+function onNavigate(details) {
+    console.debug("onNavigate", details.url);
+    try {
+        var update_id = parseInt(details.url.match(/#\/c\/(\d+)/)[1]);
+        fetchChanges(update_id);
+    } catch (e) {
+        console.warn("Failed to parse id for", details.url);
+    }
+}
+
+chrome.alarms.onAlarm.addListener(onAlarm);
+chrome.runtime.onStartup.addListener(onStartup);
+chrome.runtime.onInstalled.addListener(onStartup);
+chrome.runtime.onSuspend.addListener(function() {
+    chrome.browserAction.setBadgeBackgroundColor({color: "#888"});
+});
+chrome.runtime.onSuspendCanceled.addListener(function() {
+    chrome.browserAction.setBadgeBackgroundColor({color: "#F0F"});
+});
+chrome.storage.onChanged.addListener(function(changes, namespace) {
+    for (key in changes) {
+        var storageChange = changes[key];
+        console.debug('Storage key "%s" in namespace "%s" changed. ' +
+            'Old value was "%s", new value is "%s".',
+            key,
+            namespace,
+            storageChange.oldValue,
+            storageChange.newValue);
+        if (key === "changes") {
+            updateIcon(storageChange.newValue);
+        }
+    }
+});
+chrome.webNavigation.onReferenceFragmentUpdated.addListener(onNavigate, {
+    url: [
+        { hostSuffix: localStorage["api_endpoint"].split("://").pop() }
+    ]
+});
+chrome.webNavigation.onCommitted.addListener(onNavigate, {
+    url: [
+        { hostSuffix: localStorage["api_endpoint"].split("://").pop() }
+    ]
+});
diff --git a/extension/gerrit-api.js b/extension/gerrit-api.js
new file mode 100644
index 0000000..9bf3225
--- /dev/null
+++ b/extension/gerrit-api.js
@@ -0,0 +1,31 @@
+function queryChangeList(q) {
+    var api_endpoint = localStorage["api_endpoint"];
+    var uname = localStorage["uname"];
+    var http_password = localStorage["http_password"];
+    chrome.webRequest.onAuthRequired.addListener(function (details) {
+        return {
+            authCredentials: {
+                username: uname,
+                password: http_password
+            }
+        };
+    },
+    {urls: ["<all_urls>"]},
+    ['blocking']);
+    return new Promise(function(resolve, reject) {
+        var xhr = new XMLHttpRequest();
+        xhr.open("GET", api_endpoint + '/changes/?q=' + q);
+        xhr.send();
+        // call to reject() is ignored once resolve() has been invoked
+        xhr.onload = function() {
+            try {
+                resolve(JSON.parse(xhr.responseText.substr(5)));
+            } catch (e) {
+                reject(new TypeError(e.message));
+            }
+        }
+        xhr.onloadend = function() {
+            reject(new Error("Network error"));
+        }
+    });
+}
diff --git a/extension/icon.png b/extension/icon.png
new file mode 100644
index 0000000..c06ce08
Binary files /dev/null and b/extension/icon.png differ
diff --git a/extension/manifest.json b/extension/manifest.json
new file mode 100644
index 0000000..9c24545
--- /dev/null
+++ b/extension/manifest.json
@@ -0,0 +1,31 @@
+{
+    "manifest_version": 2,
+
+    "name": "Gerrit Reviews",
+    "description": "Hello Chrome (from Gerrit).",
+    "version": "0.2",
+
+    "permissions": [
+        "alarms",
+        "storage",
+        "tabs",
+        "webNavigation",
+        "webRequest",
+        "http://*/*", "https://*/*"
+    ],
+
+    "browser_action": {
+        "default_icon": "icon.png",
+        "default_popup": "popup.html"
+    },
+
+    "background": {
+        "scripts": [
+            "background.js",
+            "gerrit-api.js"
+        ],
+        "persistent": true
+    },
+
+    "options_page": "options.html"
+}
diff --git a/extension/options.html b/extension/options.html
new file mode 100644
index 0000000..6082ee9
--- /dev/null
+++ b/extension/options.html
@@ -0,0 +1,18 @@
+<html>
+    <head>
+        <title>My Test Extension Options</title>
+    </head>
+    <body>
+        api_endpoint: <input id="api_endpoint"><br>
+        query: <input id="query"><br>
+        <h4>For authenticated APIs</h4>
+        uname: <input id="uname"><br>
+        http password: <input id="http_password"><br>
+        <div id="status"></div>
+        <button id="save">Save</button>
+        <p/>
+        Click here to see what your query will return:<br/>
+        <span id="test-url"></span>
+    </body>
+    <script src="options.js"></script>
+</html>
diff --git a/extension/options.js b/extension/options.js
new file mode 100644
index 0000000..1ed85e6
--- /dev/null
+++ b/extension/options.js
@@ -0,0 +1,49 @@
+// Saves options to localStorage.
+function save_options() {
+    try {
+        localStorage["api_endpoint"] = document.getElementById("api_endpoint").value.replace(/\/*$/, '');
+        localStorage["uname"] = document.getElementById("uname").value || "";
+        localStorage["http_password"] = document.getElementById("http_password").value || "";
+        localStorage["query"] = document.getElementById("query").value || "";
+        // TODO: chrome.permissions.request
+        chrome.runtime.reload();
+    } catch (e) {
+        // TODO: handle validation errors
+    }
+}
+
+function getLocalStorageValue(key, def) {
+    return typeof localStorage[key] !== "undefined"
+            ? localStorage[key] : def;
+}
+
+// Restores select box state to saved value from localStorage.
+function restore_options() {
+    document.getElementById("api_endpoint").value = getLocalStorageValue("api_endpoint", "");
+    document.getElementById("uname").value = getLocalStorageValue("uname", "");
+    document.getElementById("http_password").value = getLocalStorageValue("http_password", "");
+    document.getElementById("query").value = getLocalStorageValue("query", "");
+}
+
+function updateTestUrl() {
+  var query = document.getElementById('query').value;
+  if (! query) {
+      query = "is:open+reviewer:self+-owner:self";
+  }
+  var url = document.getElementById('api_endpoint').value
+      + "/#/q/" + query;
+  var div = document.getElementById('test-url');
+  div.innerHTML = "";
+  var a = document.createElement('a');
+  a.href = url;
+  a.target = "_blank";
+  a.textContent = url;
+  div.appendChild(a);
+}
+
+document.addEventListener('DOMContentLoaded', restore_options);
+document.querySelector('#save').addEventListener('click', save_options);
+
+var testUrlDiv = document.getElementById('test-url');
+document.getElementById('api_endpoint').addEventListener('keyup', updateTestUrl);
+document.getElementById('query').addEventListener('keyup', updateTestUrl);
diff --git a/extension/popup.html b/extension/popup.html
new file mode 100644
index 0000000..f07d921
--- /dev/null
+++ b/extension/popup.html
@@ -0,0 +1,64 @@
+<!doctype html>
+<html>
+  <head>
+    <title>Gerrit Reviews</title>
+    <style>
+
+      body {
+        min-width: 357px;
+        overflow-x: hidden;
+        font-family: Ubuntu, Arial, sans-serif;
+        font-size: 75%;
+      }
+
+      dt {
+        float: left;
+        clear: left;
+      }
+
+      dd {
+        -webkit-margin-start: 4em;
+      }
+
+      mark {
+        border-radius: 2px;
+        box-shadow: 0 0 1px rgba(0, 0, 0, 0.5) inset, 0 1px 1px #DDD;
+        color: #fff;
+        background: linear-gradient(to bottom, #8dd2d9 , #58c0c7);
+        padding: 2px 7px;
+      }
+
+      .read {
+        color: #888;
+      }
+
+      #list {
+        border: 0px;
+      }
+
+    </style>
+
+    <!--
+      - JavaScript and HTML must be in separate files: see our Content Security
+      - Policy documentation[1] for details and explanation.
+      -
+      - [1]: http://developer.chrome.com/extensions/contentSecurityPolicy.html
+     -->
+    <script src="popup.js"></script>
+  </head>
+  <body>
+    <table id="list">
+      <thead>
+        <tr>
+          <th><!-- Link --></th>
+          <th><!-- Message --></th>
+          <th><!-- Delta --></th>
+          <th>CR</th>
+          <th>V</th>
+        </tr>
+      </thead>
+      <tbody id="list_body">
+      </tbody>
+    </table>
+  </body>
+</html>
diff --git a/extension/popup.js b/extension/popup.js
new file mode 100644
index 0000000..6685494
--- /dev/null
+++ b/extension/popup.js
@@ -0,0 +1,103 @@
+var BASE_URL = localStorage["api_endpoint"];
+
+function getDelta(change) {
+  var td = document.createElement('td');
+  var ins = change.insertions ? change.insertions : 0;
+  var del = change.deletions ? change.deletions : 0;
+  td.textContent = "+" + ins + ",-" + del;
+  return td;
+}
+
+function getCodeReview(change) {
+  var review = change.labels['Code-Review'];
+  var cr = review.rejected ? -2
+    : review.disliked ? -1
+    : review.recommended ? 1
+    : review.approved ? 2
+    : 0;
+  var td = document.createElement('td');
+  td.textContent = cr == 2 ? "+2"
+    : cr == 1 ? "+1"
+    : cr == 0 ? ""
+    : cr == -1 ? "-1"
+    : "-2";
+  td.style['color'] = cr > 0 ? "green"
+    : cr < 0 ? "red"
+    : "";
+  return td;
+}
+
+function getVerified(change) {
+  var verified = change.labels.Verified.approved ? 1
+    : change.labels.Verified.rejeced ? -1
+    : false;
+  var td = document.createElement(td);
+  td.textContent = verified > 0 ? "+1"
+    : verified < 0 ? "-1"
+    : "";
+  td.style['color'] = verified > 0 ? "green"
+    : verified < 0 ? "red"
+    : "";
+  return td;
+}
+
+function initUI(items) {
+    var list = document.getElementById('list_body');
+    list.innerHTML = "";
+    for (var i = 0; i < items.changes.length; i++) {
+        var change = items.changes[i];
+        if (change.reviewed)
+            continue;
+
+        try {
+            change.read = new Date(items.timestamps[change._number]) >= new Date(change.updated);
+        } catch (e) {
+        }
+
+        var tr = document.createElement('tr');
+        var link = document.createElement('td');
+        var message = document.createElement('td');
+
+        var a = document.createElement('a');
+        a.href = "#";
+        a.addEventListener('click', function(e) {
+            chrome.tabs.update(null, {
+                url: BASE_URL + "/" + change._number
+            })
+        })
+
+        a.textContent = "cl/" + change._number;
+        link.appendChild(a);
+
+        message.textContent = change.subject;
+
+        tr.appendChild(link);
+        tr.appendChild(message);
+        tr.appendChild(getDelta(change));
+        tr.appendChild(getCodeReview(change));
+        tr.appendChild(getVerified(change));
+
+        if (change.read) {
+            tr.className = "read";
+        }
+
+        // TODO Use change.labels.Verified and change.labels.Code-Review here
+        // See https://gerrit.magicleap.com/Documentation/rest-api-changes.html#list-changes
+        list.appendChild(tr);
+    }
+}
+
+document.addEventListener('DOMContentLoaded', function() {
+    chrome.storage.local.get(["changes", "timestamps"], initUI);
+});
+
+chrome.storage.onChanged.addListener(function(changes, namespace) {
+    if (changes.changes && changes.timestamps) {
+        initUI({
+            "changes": changes.changes.newValue,
+            "timestamps": changes.timestamps.newValue
+        });
+    } else {
+        chrome.storage.local.get(["changes", "timestamps"], initUI);
+    }
+});
diff --git a/gerrit-api.js b/gerrit-api.js
deleted file mode 100644
index 9bf3225..0000000
--- a/gerrit-api.js
+++ /dev/null
@@ -1,31 +0,0 @@
-function queryChangeList(q) {
-    var api_endpoint = localStorage["api_endpoint"];
-    var uname = localStorage["uname"];
-    var http_password = localStorage["http_password"];
-    chrome.webRequest.onAuthRequired.addListener(function (details) {
-        return {
-            authCredentials: {
-                username: uname,
-                password: http_password
-            }
-        };
-    },
-    {urls: ["<all_urls>"]},
-    ['blocking']);
-    return new Promise(function(resolve, reject) {
-        var xhr = new XMLHttpRequest();
-        xhr.open("GET", api_endpoint + '/changes/?q=' + q);
-        xhr.send();
-        // call to reject() is ignored once resolve() has been invoked
-        xhr.onload = function() {
-            try {
-                resolve(JSON.parse(xhr.responseText.substr(5)));
-            } catch (e) {
-                reject(new TypeError(e.message));
-            }
-        }
-        xhr.onloadend = function() {
-            reject(new Error("Network error"));
-        }
-    });
-}
diff --git a/icon.png b/icon.png
deleted file mode 100644
index c06ce08..0000000
Binary files a/icon.png and /dev/null differ
diff --git a/manifest.json b/manifest.json
deleted file mode 100644
index 9c24545..0000000
--- a/manifest.json
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-    "manifest_version": 2,
-
-    "name": "Gerrit Reviews",
-    "description": "Hello Chrome (from Gerrit).",
-    "version": "0.2",
-
-    "permissions": [
-        "alarms",
-        "storage",
-        "tabs",
-        "webNavigation",
-        "webRequest",
-        "http://*/*", "https://*/*"
-    ],
-
-    "browser_action": {
-        "default_icon": "icon.png",
-        "default_popup": "popup.html"
-    },
-
-    "background": {
-        "scripts": [
-            "background.js",
-            "gerrit-api.js"
-        ],
-        "persistent": true
-    },
-
-    "options_page": "options.html"
-}
diff --git a/options.html b/options.html
deleted file mode 100644
index 6082ee9..0000000
--- a/options.html
+++ /dev/null
@@ -1,18 +0,0 @@
-<html>
-    <head>
-        <title>My Test Extension Options</title>
-    </head>
-    <body>
-        api_endpoint: <input id="api_endpoint"><br>
-        query: <input id="query"><br>
-        <h4>For authenticated APIs</h4>
-        uname: <input id="uname"><br>
-        http password: <input id="http_password"><br>
-        <div id="status"></div>
-        <button id="save">Save</button>
-        <p/>
-        Click here to see what your query will return:<br/>
-        <span id="test-url"></span>
-    </body>
-    <script src="options.js"></script>
-</html>
diff --git a/options.js b/options.js
deleted file mode 100644
index 1ed85e6..0000000
--- a/options.js
+++ /dev/null
@@ -1,49 +0,0 @@
-// Saves options to localStorage.
-function save_options() {
-    try {
-        localStorage["api_endpoint"] = document.getElementById("api_endpoint").value.replace(/\/*$/, '');
-        localStorage["uname"] = document.getElementById("uname").value || "";
-        localStorage["http_password"] = document.getElementById("http_password").value || "";
-        localStorage["query"] = document.getElementById("query").value || "";
-        // TODO: chrome.permissions.request
-        chrome.runtime.reload();
-    } catch (e) {
-        // TODO: handle validation errors
-    }
-}
-
-function getLocalStorageValue(key, def) {
-    return typeof localStorage[key] !== "undefined"
-            ? localStorage[key] : def;
-}
-
-// Restores select box state to saved value from localStorage.
-function restore_options() {
-    document.getElementById("api_endpoint").value = getLocalStorageValue("api_endpoint", "");
-    document.getElementById("uname").value = getLocalStorageValue("uname", "");
-    document.getElementById("http_password").value = getLocalStorageValue("http_password", "");
-    document.getElementById("query").value = getLocalStorageValue("query", "");
-}
-
-function updateTestUrl() {
-  var query = document.getElementById('query').value;
-  if (! query) {
-      query = "is:open+reviewer:self+-owner:self";
-  }
-  var url = document.getElementById('api_endpoint').value
-      + "/#/q/" + query;
-  var div = document.getElementById('test-url');
-  div.innerHTML = "";
-  var a = document.createElement('a');
-  a.href = url;
-  a.target = "_blank";
-  a.textContent = url;
-  div.appendChild(a);
-}
-
-document.addEventListener('DOMContentLoaded', restore_options);
-document.querySelector('#save').addEventListener('click', save_options);
-
-var testUrlDiv = document.getElementById('test-url');
-document.getElementById('api_endpoint').addEventListener('keyup', updateTestUrl);
-document.getElementById('query').addEventListener('keyup', updateTestUrl);
diff --git a/popup.html b/popup.html
deleted file mode 100644
index f07d921..0000000
--- a/popup.html
+++ /dev/null
@@ -1,64 +0,0 @@
-<!doctype html>
-<html>
-  <head>
-    <title>Gerrit Reviews</title>
-    <style>
-
-      body {
-        min-width: 357px;
-        overflow-x: hidden;
-        font-family: Ubuntu, Arial, sans-serif;
-        font-size: 75%;
-      }
-
-      dt {
-        float: left;
-        clear: left;
-      }
-
-      dd {
-        -webkit-margin-start: 4em;
-      }
-
-      mark {
-        border-radius: 2px;
-        box-shadow: 0 0 1px rgba(0, 0, 0, 0.5) inset, 0 1px 1px #DDD;
-        color: #fff;
-        background: linear-gradient(to bottom, #8dd2d9 , #58c0c7);
-        padding: 2px 7px;
-      }
-
-      .read {
-        color: #888;
-      }
-
-      #list {
-        border: 0px;
-      }
-
-    </style>
-
-    <!--
-      - JavaScript and HTML must be in separate files: see our Content Security
-      - Policy documentation[1] for details and explanation.
-      -
-      - [1]: http://developer.chrome.com/extensions/contentSecurityPolicy.html
-     -->
-    <script src="popup.js"></script>
-  </head>
-  <body>
-    <table id="list">
-      <thead>
-        <tr>
-          <th><!-- Link --></th>
-          <th><!-- Message --></th>
-          <th><!-- Delta --></th>
-          <th>CR</th>
-          <th>V</th>
-        </tr>
-      </thead>
-      <tbody id="list_body">
-      </tbody>
-    </table>
-  </body>
-</html>
diff --git a/popup.js b/popup.js
deleted file mode 100644
index 6685494..0000000
--- a/popup.js
+++ /dev/null
@@ -1,103 +0,0 @@
-var BASE_URL = localStorage["api_endpoint"];
-
-function getDelta(change) {
-  var td = document.createElement('td');
-  var ins = change.insertions ? change.insertions : 0;
-  var del = change.deletions ? change.deletions : 0;
-  td.textContent = "+" + ins + ",-" + del;
-  return td;
-}
-
-function getCodeReview(change) {
-  var review = change.labels['Code-Review'];
-  var cr = review.rejected ? -2
-    : review.disliked ? -1
-    : review.recommended ? 1
-    : review.approved ? 2
-    : 0;
-  var td = document.createElement('td');
-  td.textContent = cr == 2 ? "+2"
-    : cr == 1 ? "+1"
-    : cr == 0 ? ""
-    : cr == -1 ? "-1"
-    : "-2";
-  td.style['color'] = cr > 0 ? "green"
-    : cr < 0 ? "red"
-    : "";
-  return td;
-}
-
-function getVerified(change) {
-  var verified = change.labels.Verified.approved ? 1
-    : change.labels.Verified.rejeced ? -1
-    : false;
-  var td = document.createElement(td);
-  td.textContent = verified > 0 ? "+1"
-    : verified < 0 ? "-1"
-    : "";
-  td.style['color'] = verified > 0 ? "green"
-    : verified < 0 ? "red"
-    : "";
-  return td;
-}
-
-function initUI(items) {
-    var list = document.getElementById('list_body');
-    list.innerHTML = "";
-    for (var i = 0; i < items.changes.length; i++) {
-        var change = items.changes[i];
-        if (change.reviewed)
-            continue;
-
-        try {
-            change.read = new Date(items.timestamps[change._number]) >= new Date(change.updated);
-        } catch (e) {
-        }
-
-        var tr = document.createElement('tr');
-        var link = document.createElement('td');
-        var message = document.createElement('td');
-
-        var a = document.createElement('a');
-        a.href = "#";
-        a.addEventListener('click', function(e) {
-            chrome.tabs.update(null, {
-                url: BASE_URL + "/" + change._number
-            })
-        })
-
-        a.textContent = "cl/" + change._number;
-        link.appendChild(a);
-
-        message.textContent = change.subject;
-
-        tr.appendChild(link);
-        tr.appendChild(message);
-        tr.appendChild(getDelta(change));
-        tr.appendChild(getCodeReview(change));
-        tr.appendChild(getVerified(change));
-
-        if (change.read) {
-            tr.className = "read";
-        }
-
-        // TODO Use change.labels.Verified and change.labels.Code-Review here
-        // See https://gerrit.magicleap.com/Documentation/rest-api-changes.html#list-changes
-        list.appendChild(tr);
-    }
-}
-
-document.addEventListener('DOMContentLoaded', function() {
-    chrome.storage.local.get(["changes", "timestamps"], initUI);
-});
-
-chrome.storage.onChanged.addListener(function(changes, namespace) {
-    if (changes.changes && changes.timestamps) {
-        initUI({
-            "changes": changes.changes.newValue,
-            "timestamps": changes.timestamps.newValue
-        });
-    } else {
-        chrome.storage.local.get(["changes", "timestamps"], initUI);
-    }
-});
